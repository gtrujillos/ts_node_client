{"version":3,"file":"RTSPClient.js","sourceRoot":"","sources":["../lib/RTSPClient.ts"],"names":[],"mappings":"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","sourcesContent":["import * as net from \"net\";\nimport * as dgram from \"dgram\";\nimport {parse as urlParse} from \"url\";\nimport { EventEmitter } from \"events\";\n\nimport { parseRTPPacket, parseRTCPPacket, getMD5Hash, parseTransport, generateSSRC } from \"./util\";\n\nimport * as transform from \"sdp-transform\";\n\nconst RTP_AVP = \"RTP/AVP\";\n\nconst STATUS_OK = 200;\nconst STATUS_UNAUTH = 401;\n\nconst WWW_AUTH = \"WWW-Authenticate\";\nconst WWW_AUTH_REGEX = new RegExp('([a-zA-Z]+)\\s*=\\s*\"?((?<=\").*?(?=\")|.*?(?=,?\\s*[a-zA-Z]+\\s*\\=)|.+[^=])', \"g\");\n\nenum ReadStates {\n  SEARCHING,\n  READING_RTSP_HEADER,\n  READING_RTSP_PAYLOAD,\n  READING_RAW_PACKET_SIZE,\n  READING_RAW_PACKET\n};\n\ntype Connection = 'udp' | 'tcp';\n\ntype Headers = {\n  [key: string]: string | number | undefined,\n  Session?: string,\n  Location?: string,\n  CSeq?: number,\n  \"WWW-Authenticate\"?: string,\n  Transport?: string,\n  Unsupported?: string\n};\n\nexport default class RTSPClient extends EventEmitter {\n  username: string;\n  password: string;\n  headers: { [key: string]: string };\n  \n  isConnected: boolean = false;\n\n  // These are all set in #connect or #_netConnect.\n\n  _url?: string;\n  _client?: net.Socket;\n  _cSeq: number = 0;\n  _unsupportedExtensions?: string[];\n  // Example: 'SessionId'[';timeout=seconds']\n  _session?: string;\n  _keepAliveID?: any;\n\n  readState: ReadStates = ReadStates.SEARCHING;\n\n  // Used as a cache for the data stream.\n  // What's in here is based on current #readState.\n  messageBytes: number[] = [];\n  \n  // Used for parsing RTSP responses,\n\n  // Content-Length header in the RTSP message.\n  rtspContentLength: number = 0;\n  rtspStatusLine: string = \"\";\n  rtspHeaders: Headers = {};\n\n  // Used for parsing RTP/RTCP responses.\n\n  rtspPacketLength: number = 0;\n  rtspPacket: Buffer = new Buffer(\"\");\n  rtspPacketPointer: number = 0;\n  \n  // Used in #_emptyReceiverReport.\n  clientSSRC = generateSSRC();\n\n  constructor(username: string, password: string, headers: { [key: string]: string }) {\n    super();\n\n    this.username = username;\n    this.password = password;\n    this.headers = {\n      ...(headers || {}),\n      \"User-Agent\": \"yellowstone/3.x\"\n    };\n  }\n\n  // This manages the lifecycle for the RTSP connection\n  // over TCP.\n  //\n  // Sets #_client.\n  //\n  // Handles receiving data & closing port, called during\n  // #connect.\n  _netConnect(hostname: string, port: number) {\n    return new Promise((resolve, reject) => {\n      // Set after listeners defined.\n      let client: net.Socket;\n\n      const errorListener = (err: any) => {\n        client.removeListener(\"error\", errorListener);\n        reject(err);\n      };\n\n      const closeListener = () => {\n        client.removeListener(\"close\", closeListener);\n        this.close(true);\n      };\n\n      const responseListener = (responseName: string, headers: Headers) => {\n        const name = responseName.split(\" \")[0];\n\n        if (name.indexOf(\"RTSP/\") === 0) {\n          return;\n        }\n\n        if (name === \"REDIRECT\" || name === \"ANNOUNCE\") {\n          this.respond(\"200 OK\", { CSeq: headers.CSeq });\n        }\n\n        if (name === \"REDIRECT\" && headers.Location) {\n          this.close();\n          this.connect(headers.Location);\n        }\n      };\n\n      client = net.connect(port, hostname, () => {\n        this.isConnected = true;\n        this._client = client;\n\n        client.removeListener(\"error\", errorListener);\n\n        this.on(\"response\", responseListener);\n        resolve(this);\n      });\n\n      client.on(\"data\", this._onData.bind(this));\n      client.on(\"error\", errorListener);\n      client.on(\"close\", closeListener);\n    });\n  }\n\n  async connect(url: string, options: {keepAlive: boolean, connection: Connection} = {keepAlive: true, connection: 'udp'}) {\n    const { keepAlive, connection } = options;\n\n    const { hostname, port } = urlParse(this._url = url);\n    if (!hostname) {\n      throw new Error('URL parsing error in connect method.');\n    }\n\n    await this._netConnect(hostname, parseInt(port || \"554\"));\n    await this.request(\"OPTIONS\");\n\n    const describeRes = await this.request(\"DESCRIBE\", { Accept: \"application/sdp\" });\n    if (!describeRes || !describeRes.mediaHeaders) {\n      throw new Error('No media headers on DESCRIBE; RTSP server is broken (sanity check)');\n    }\n\n    // For now, only RTP/AVP is supported.\n    const {media} = transform.parse(describeRes.mediaHeaders.join(\"\\r\\n\"));\n\n    // From parsed SDP.\n    const mediaSource = media.find(source => source.type === \"video\" && source.protocol === RTP_AVP);\n    if (!mediaSource || !mediaSource.rtp) {\n      throw new Error(\n        `Only video sources using the ${RTP_AVP} protocol are supported at this time.`\n      );\n    }\n\n    if (mediaSource.control) {\n      this._url += `/${mediaSource.control}`;\n    }\n\n    // Perform a SETUP with\n    // either 'udp' RTP/RTCP packets\n    // or with 'tcp' RTP/TCP packets which are interleaved into the TCP based RTSP socket\n    let setupRes;\n\n    if (connection === \"udp\") {\n      // Create a pair of UDP listeners, even numbered port for RTP\n      // and odd numbered port for RTCP\n\n      const rtpPort = 5000;\n      const rtpReceiver = dgram.createSocket(\"udp4\");\n\n      rtpReceiver.on(\"message\", (buf, remote) => {\n        const packet = parseRTPPacket(buf);\n        this.emit(\"data\", 0, packet.payload, packet);\n      });\n\n      const rtcpPort = rtpPort + 1;\n      const rtcpReceiver = dgram.createSocket(\"udp4\");\n\n      rtcpReceiver.on(\"message\", (buf, remote) => {\n        const packet = parseRTCPPacket(buf);\n        this.emit(\"controlData\", 1, packet);\n\n        const receiver_report = this._emptyReceiverReport();\n        this._sendUDPData(remote.address, remote.port, receiver_report);\n      });\n\n      // Block until both UDP sockets are open.\n\n      await new Promise(resolve => {\n        rtpReceiver.bind(rtpPort, () => resolve());\n      });\n\n      await new Promise(resolve => {\n        rtcpReceiver.bind(rtcpPort + 1, () => resolve());\n      });\n\n      setupRes = await this.request(\"SETUP\", {\n        Transport: `RTP/AVP;unicast;client_port=${rtpPort}-${rtcpPort}`\n      });\n    } else if (connection === \"tcp\") {\n      // channel 0, RTP\n      // channel 1, RTCP\n      setupRes = await this.request(\"SETUP\", { Transport: `RTP/AVP/TCP;interleaved=0-1` });\n    } else {\n      throw new Error(`Connection parameter to RTSPClient#connect is ${connection}, not udp or tcp!`);\n    }\n\n    if (!setupRes) {\n      throw new Error(\n        'No SETUP response; RTSP server is broken (sanity check)'\n      );\n    }\n\n    const {headers} = setupRes;\n    \n    if (!headers.Transport) {\n      throw new Error(\n        'No Transport header on SETUP; RTSP server is broken (sanity check)'\n      );\n    }\n\n    const transport = parseTransport(headers.Transport);\n    if (transport.protocol !== 'RTP/AVP/TCP' && transport.protocol !== 'RTP/AVP') {\n      throw new Error(\n        'Only RTSP servers supporting RTP/AVP(unicast) or RTP/ACP/TCP are supported at this time.'\n      );\n    }\n\n    if (headers.Unsupported) {\n      this._unsupportedExtensions = headers.Unsupported.split(\",\");\n    }\n\n    if (headers.Session) {\n      this._session = headers.Session.split(\";\")[0];\n    }\n\n    if (keepAlive) {\n      // Start a Timer to send OPTIONS every 20 seconds to keep stream alive\n      this._keepAliveID = setInterval(() => this.request(\"OPTIONS\"), 20 * 1000);\n    }\n\n    const codec = (mediaSource.rtp as any)[0].codec;\n\n    return {\n      codec,\n      mediaSource,\n      transport: transport.parameters,\n      isH264: codec === \"H264\"\n    };\n  }\n\n  request(requestName: string, headersParam: Headers = {}, url?: string): Promise<{headers: Headers, mediaHeaders?: string[]} | void> {\n    if (!this._client) {\n      return Promise.resolve();\n    }\n\n    const id = ++this._cSeq;\n    // mutable via string addition\n    let req = `${requestName} ${url || this._url} RTSP/1.0\\r\\nCSeq: ${id}\\r\\n`;\n\n    const headers = {\n      ...this.headers,\n      ...headersParam\n    };\n\n    req += Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}\\r\\n`)\n      .join(\"\");\n\n    this.emit(\"log\", req, \"C->S\");\n    // Make sure to add an empty line after the request.\n    this._client.write(`${req}\\r\\n`);\n    \n    return new Promise((resolve, reject) => {\n      const responseHandler = (responseName: string, resHeaders: Headers, mediaHeaders: string[]) => {\n        if (resHeaders.CSeq !== id && resHeaders.Cseq !== id) {\n          return;\n        }\n\n        this.removeListener(\"response\", responseHandler);\n\n        const statusCode = parseInt(responseName.split(\" \")[1]);\n\n        if (statusCode === STATUS_OK) {\n          if (!!mediaHeaders.length) {\n            resolve({\n              headers: resHeaders,\n              mediaHeaders\n            });\n          } else {\n            resolve({\n              headers: resHeaders\n            });\n          }\n        } else {\n          const authHeader = resHeaders[WWW_AUTH];\n\n          // We have status code unauthenticated.\n          if (statusCode === STATUS_UNAUTH && authHeader) {\n            const type = authHeader.split(\" \")[0];\n\n            // Get auth properties from WWW_AUTH header.\n            let realm: string = \"\";\n            let nonce: string = \"\";\n\n            let match = WWW_AUTH_REGEX.exec(authHeader)\n            while (match != null) {\n              const prop = match[1];\n\n              if (prop == \"realm\" && match[2]) {\n                realm = match[2];\n              }\n\n              if (prop == \"nonce\" && match[2]) {\n                nonce = match[2];\n              }\n\n              match = WWW_AUTH_REGEX.exec(authHeader);\n            }\n\n            // mutable, corresponds to Authorization header\n            let authString = \"\";\n\n            if (type === \"Digest\") {\n              // Digest Authentication\n\n              const ha1 = getMD5Hash(`${this.username}:${realm}:${this.password}`);\n              const ha2 = getMD5Hash(`${requestName}:${this._url}`);\n              const ha3 = getMD5Hash(`${ha1}:${nonce}:${ha2}`);\n\n              authString = `Digest username=\"${this.username}\",realm=\"${realm}\",nonce=\"${nonce}\",uri=\"${this._url}\",response=\"${ha3}\"`;\n            } else if (type === \"Basic\") {\n              // Basic Authentication\n              // https://xkcd.com/538/\n              const b64 = new Buffer(`${this.username}:${this.password}`).toString(\"base64\");\n              authString = `Basic ${b64}`;\n            }\n\n            Object.assign(headers, {\n              Authorization: authString\n            });\n\n            resolve(this.request(requestName, headers, url));\n            return;\n          }\n\n          reject(new Error(`Bad RTSP status code ${statusCode}!`));\n          return;\n        }\n      };\n\n      this.on(\"response\", responseHandler);\n    });\n  }\n\n  respond(status: string, headersParam: Headers = {}) {\n    if (!this._client) {\n      return;\n    }\n\n    // mutable via string addition\n    let res = `RTSP/1.0 ${status}\\r\\n`;\n\n    const headers = {\n      ...this.headers,\n      ...headersParam\n    };\n\n    res += Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}\\r\\n`)\n      .join(\"\");\n\n    this.emit(\"log\", res, \"C->S\");\n    this._client.write(`${res}\\r\\n`);\n  }\n\n  async play() {\n    if (!this.isConnected) {\n      throw new Error(\"Client is not connected.\");\n    }\n\n    await this.request(\"PLAY\", { Session: this._session });\n    return this;\n  }\n\n  async pause() {\n    if (!this.isConnected) {\n      throw new Error(\"Client is not connected.\");\n    }\n\n    await this.request(\"PAUSE\", { Session: this._session });\n    return this;\n  }\n\n  async close(isImmediate: boolean = false) {\n    if (!this._client) {\n      return this;\n    }\n  \n    if (!isImmediate) {\n      await this.request(\"TEARDOWN\", {\n        Session: this._session\n      });\n    }\n\n    this._client.end();\n    this.removeAllListeners(\"response\");\n\n    if (this._keepAliveID) {\n      clearInterval(this._keepAliveID);\n      this._keepAliveID = 0;\n    }\n\n    this.isConnected = false;\n    this._cSeq = 0;\n\n    return this;\n  }\n\n  _onData(data: Buffer) {\n    let index = 0;\n\n    // $\n    const PACKET_START = 0x24;\n    // R\n    const RTSP_HEADER_START = 0x52;\n    // /n\n    const ENDL = 10;\n\n    while (index < data.length) {\n      // read RTP or RTCP packet\n      if (this.readState == ReadStates.SEARCHING && data[index] == PACKET_START) {\n        this.messageBytes = [ data[index] ];\n        index++;\n\n        this.readState = ReadStates.READING_RAW_PACKET_SIZE;\n      } else if (this.readState == ReadStates.READING_RAW_PACKET_SIZE) {\n        // accumulate bytes for $, channel and length\n        this.messageBytes.push(data[index]);\n        index++;\n\n        if (this.messageBytes.length == 4) {\n          this.rtspPacketLength = (this.messageBytes[2] << 8) + this.messageBytes[3];\n\n          if (this.rtspPacketLength > 0) {\n            this.rtspPacket = new Buffer(this.rtspPacketLength);\n            this.rtspPacketPointer = 0;\n            this.readState = ReadStates.READING_RAW_PACKET;\n          } else {\n            this.readState = ReadStates.SEARCHING;\n          }\n        }\n      } else if (this.readState == ReadStates.READING_RAW_PACKET) {\n        this.rtspPacket[this.rtspPacketPointer++] = data[index];\n        index++;\n\n        if (this.rtspPacketPointer == this.rtspPacketLength) {\n          const packetChannel = this.messageBytes[1];\n          if (packetChannel === 0) {\n            const packet = parseRTPPacket(this.rtspPacket);\n            this.emit(\"data\", packetChannel, packet.payload, packet);\n          }\n          if (packetChannel === 1) {\n            const packet = parseRTCPPacket(this.rtspPacket);\n            this.emit(\"controlData\", packetChannel, packet);\n            const receiver_report = this._emptyReceiverReport();\n            this._sendInterleavedData(packetChannel, receiver_report);\n          }\n          this.readState = ReadStates.SEARCHING;\n        }\n      // read response data\n      } else if (this.readState == ReadStates.SEARCHING && data[index] == RTSP_HEADER_START) {\n        // found the start of a RTSP rtsp_message\n        this.messageBytes = [ data[index] ];\n        index++;\n\n        this.readState = ReadStates.READING_RTSP_HEADER;\n      } else if (this.readState == ReadStates.READING_RTSP_HEADER) {\n        // Reading a RTSP message.\n\n        // Add character to the messageBytes\n        // Ignore /r (13) but keep /n (10)\n        if (data[index] != 13) {\n          this.messageBytes.push(data[index]);\n        }\n        index++;\n\n        // if we have two new lines back to back then we have a complete RTSP command,\n        // note we may still need to read the Content Payload (the body) e.g. the SDP\n        if (\n          this.messageBytes.length >= 2 &&\n          this.messageBytes[this.messageBytes.length - 2] == ENDL &&\n          this.messageBytes[this.messageBytes.length - 1] == ENDL\n        ) {\n          // Parse the Header\n\n          const text = String.fromCharCode.apply(null, this.messageBytes);\n          const lines = text.split(\"\\n\");\n\n          this.rtspContentLength = 0;          \n          this.rtspStatusLine = lines[0];\n          this.rtspHeaders = {};\n\n          lines.forEach(line => {\n            const indexOf = line.indexOf(\":\");\n            \n            if (indexOf !== line.length - 1) {\n              const key = line.substring(0, indexOf).trim();\n              const data = line.substring(indexOf + 1).trim();\n\n              this.rtspHeaders[key] =\n                (key != \"Session\" && data.match(/^[0-9]+$/))\n                  ? parseInt(data, 10)\n                  : data;\n            \n              // workaround for buggy Hipcam RealServer/V1.0 camera which returns Content-length and not Content-Length\n              if (key.toLowerCase() == \"content-length\") {\n                this.rtspContentLength = parseInt(data, 10);\n              }\n            }\n          });\n\n          // if no content length, there there's no media headers\n          // emit the message\n          if (!this.rtspContentLength) {\n            this.emit(\"log\", text, \"S->C\");\n\n            this.emit(\"response\", this.rtspStatusLine, this.rtspHeaders, []);\n            this.readState = ReadStates.SEARCHING;\n          } else {\n            this.messageBytes = [];\n            this.readState = ReadStates.READING_RTSP_PAYLOAD;\n          }\n        }\n      } else if (this.readState == ReadStates.READING_RTSP_PAYLOAD &&\n          this.messageBytes.length < this.rtspContentLength) {\n        // Copy data into the RTSP payload\n        this.messageBytes.push(data[index]);\n        index++;\n\n        if (this.messageBytes.length == this.rtspContentLength) {\n          const text = String.fromCharCode.apply(null, this.messageBytes);\n          const mediaHeaders = text.split(\"\\n\");\n\n          // Emit the RTSP message\n          this.emit(\"log\",\n            String.fromCharCode.apply(null, this.messageBytes) + text,\n            \"S->C\");\n\n          this.emit(\"response\", this.rtspStatusLine, this.rtspHeaders, mediaHeaders);\n          this.readState = ReadStates.SEARCHING;\n        }\n      } else {\n        // unexpected data\n        throw new Error(\n          \"Bug in RTSP data framing, please file an issue with the author with stacktrace.\"\n        );\n      }\n    } // end while\n  }\n\n  _sendInterleavedData(channel: number, buffer: Buffer) {\n    if (!this._client) {\n      return;\n    }\n\n    const req = `${buffer.length} bytes of interleaved data on channel ${channel}`;\n    this.emit(\"log\", req, \"C->S\");\n\n    const header = new Buffer(4);\n    header[0] = 0x24; // ascii $\n    header[1] = channel;\n    header[2] = (buffer.length >> 8) & 0xff;\n    header[3] = (buffer.length >> 0) & 0xff;\n\n    const data = Buffer.concat([header, buffer]);\n    this._client.write(data);\n  }\n\n  _sendUDPData(host: string, port: number, buffer: Buffer) {\n    var udp = dgram.createSocket('udp4');\n    udp.send(buffer, 0, buffer.length, port, host, (err, bytes) => {\n      // TODO: Don't ignore errors.\n      udp.close();\n    });\n  }\n\n  _emptyReceiverReport(): Buffer {\n    const report = new Buffer(8);\n    const version = 2;\n    const paddingBit = 0;\n    const reportCount = 0; // an empty report\n    const packetType = 201; // Receiver Report\n    const length = report.length / 4 - 1; // num 32 bit words minus 1\n    report[0] = (version << 6) + (paddingBit << 5) + reportCount;\n    report[1] = packetType;\n    report[2] = (length >> 8) & 0xff;\n    report[3] = (length >> 0) & 0xff;\n    report[4] = (this.clientSSRC >> 24) & 0xff;\n    report[5] = (this.clientSSRC >> 16) & 0xff;\n    report[6] = (this.clientSSRC >> 8) & 0xff;\n    report[7] = (this.clientSSRC >> 0) & 0xff;\n\n    return report;\n  }\n}\n\nexport {RTPPacket, RTCPPacket} from \"./util\";\n"]}